---
description: Project document
globs: 
alwaysApply: false
---
# Project Document: Java Code Knowledge Graph (KùzuDB Edition)

**Version:** 2.1
**Date:** May 11, 2025

## 1. Introduction

### 1.1 Purpose
This document outlines the schema, design, and implementation strategy for creating a Code Knowledge Graph (CKG) for Java codebases. The primary goal is to represent a Java codebase as a graph, capturing its structure, relationships, and dependencies. All entities will be fully denormalized, storing all their respective data, including code bodies and comments. The system will use KùzuDB as its graph database.

### 1.2 Background
Understanding complex Java codebases is a significant challenge in software development and maintenance. A CKG can provide valuable insights into code structure, dependencies, and potential impact of changes. By representing Java code entities (like files, packages, classes, methods) and their relationships (like calls, inheritance, dependencies) as a graph, we can perform powerful queries and analyses.

### 1.3 Goals
* Define a denormalized, Java-specific schema for entities and relationships for KùzuDB.
* Ensure each entity stores its complete relevant data, including source code snippets (bodies) and comments.
* Describe the data ingestion and population process for Java code targeting KùzuDB.
* Identify potential use cases and analysis capabilities for Java codebases.

### 1.4 Scope

#### In Scope:
* KùzuDB Node and Relationship table schema definitions for Java.
* Inclusion of full source text for relevant Java entities (file content, method/class bodies, comment text).
* Conceptual data ingestion pipeline using the `tree-sitter-java` parser and KùzuDB.

#### Out of Scope:
* Detailed algorithms for static/dynamic code analysis beyond AST traversal.
* Performance benchmarks of KùzuDB against other graph databases.
* Schema definitions or support for languages other than Java.

## 2. KùzuDB Schema for Java

This schema defines the Node tables and Relationship tables for representing Java codebases in KùzuDB. All attributes are explicitly defined for each table.

### 2.1 Java Node Table Definitions

#### `FileNode` Table
* **Description:** Represents a physical Java file in the codebase.
* **Properties:**
    * `path` (STRING, PRIMARY KEY): The absolute or relative file path.
    * `name` (STRING): The file name (e.g., "MyClass.java").
    * `qualifiedName` (STRING): A unique name, often the same as `path`.
    * `language` (STRING): "Java".
    * `documentation` (STRING, Optional): File-level comments if any.
    * `size` (INT64, Optional): Size of the file in bytes.
    * `lastModifiedDate` (DATETIME, Optional): Last modification timestamp.
    * `checksum` (STRING, Optional): A checksum (e.g., MD5, SHA256) of the file content for change tracking.
    * `content` (STRING): The full raw text content of the file.

#### `PackageNode` Table
* **Description:** Represents a Java package.
* **Properties:**
    * `qualifiedName` (STRING, PRIMARY KEY): The fully qualified package name (e.g., "com.example.util").
    * `name` (STRING): The simple package name (e.g., "util").
    * `documentation` (STRING, Optional): Extracted Javadoc from `package-info.java`.
    * `language` (STRING): "Java".

#### `ClassNode` Table
* **Description:** Represents a Java class (including enums and records).
* **Properties:**
    * `qualifiedName` (STRING, PRIMARY KEY): The fully qualified class name (e.g., "com.example.MyClass").
    * `name` (STRING): The simple class name (e.g., "MyClass").
    * `documentation` (STRING, Optional): Extracted Javadoc for the class.
    * `language` (STRING): "Java".
    * `accessModifier` (STRING, Optional): Visibility level (e.g., "public", "private", "protected", "package-private").
    * `isAbstract` (BOOL, Optional): True if the class is abstract.
    * `isFinal` (BOOL, Optional): True if the class is final.
    * `isEnum` (BOOL, Optional): True if the class is an enum.
    * `isRecord` (BOOL, Optional): True if the class is a record (Java 14+).
    * `genericParameters` (LIST(STRING), Optional): e.g., `["T", "E extends Number"]`.
    * `body` (STRING, Optional): The full source code of the class definition (from opening brace to closing brace, including inner members).

#### `InterfaceNode` Table
* **Description:** Represents a Java interface.
* **Properties:**
    * `qualifiedName` (STRING, PRIMARY KEY): The fully qualified interface name (e.g., "com.example.MyInterface").
    * `name` (STRING): The simple interface name (e.g., "MyInterface").
    * `documentation` (STRING, Optional): Extracted Javadoc for the interface.
    * `language` (STRING): "Java".
    * `accessModifier` (STRING, Optional): Typically "public" or "package-private".
    * `isFunctionalInterface` (BOOL, Optional): True if annotated with `@FunctionalInterface`.
    * `genericParameters` (LIST(STRING), Optional): e.g., `["T"]`.
    * `body` (STRING, Optional): The full source code of the interface definition.

#### `MethodNode` Table
* **Description:** Represents a Java method.
* **Properties:**
    * `qualifiedName` (STRING, PRIMARY KEY): Unique name, e.g., "com.example.MyClass.myMethod(int,java.lang.String)".
    * `name` (STRING): The method name (e.g., "myMethod").
    * `documentation` (STRING, Optional): Extracted Javadoc for the method.
    * `language` (STRING): "Java".
    * `returnType` (STRING, Optional): The fully qualified data type of the value returned.
    * `accessModifier` (STRING, Optional): Visibility level.
    * `isStatic` (BOOL, Optional): True if the method is static.
    * `isAbstract` (BOOL, Optional): True if the method is abstract.
    * `isFinal` (BOOL, Optional): True if the method is final.
    * `isSynchronized` (BOOL, Optional): True if the method is synchronized.
    * `isNative` (BOOL, Optional): True if the method is native.
    * `isDefault` (BOOL, Optional): True if it's a default method in an interface.
    * `cyclomaticComplexity` (INT64, Optional): A measure of the code's complexity.
    * `linesOfCode` (INT64, Optional): Number of source lines of code (SLOC) within the method body.
    * `signature` (STRING, Optional): A textual representation of the method's signature (name + parameter types).
    * `genericParameters` (LIST(STRING), Optional): e.g., `["<T> void myGenericMethod(T arg)"]`.
    * `varargsParameterName` (STRING, Optional): Name of the varargs parameter if present.
    * `body` (STRING, Optional): The full source code of the method body (from opening brace to closing brace).

#### `ConstructorNode` Table
* **Description:** Represents a Java constructor.
* **Properties:**
    * `qualifiedName` (STRING, PRIMARY KEY): Unique name, e.g., "com.example.MyClass.<init>(int,java.lang.String)".
    * `name` (STRING): The class name (constructors are named after the class, or `<init>`).
    * `documentation` (STRING, Optional): Extracted Javadoc for the constructor.
    * `language` (STRING): "Java".
    * `accessModifier` (STRING, Optional): Visibility level.
    * `cyclomaticComplexity` (INT64, Optional): A measure of the code's complexity.
    * `linesOfCode` (INT64, Optional): Number of source lines of code (SLOC) within the constructor body.
    * `signature` (STRING, Optional): A textual representation of the constructor's signature.
    * `genericParameters` (LIST(STRING), Optional).
    * `varargsParameterName` (STRING, Optional): Name of the varargs parameter if present.
    * `body` (STRING, Optional): The full source code of the constructor body.

#### `FieldNode` Table
* **Description:** Represents a Java field (member variable).
* **Properties:**
    * `qualifiedName` (STRING, PRIMARY KEY): Unique name, e.g., "com.example.MyClass.myField".
    * `name` (STRING): The field name (e.g., "myField").
    * `documentation` (STRING, Optional): Extracted Javadoc for the field.
    * `language` (STRING): "Java".
    * `type` (STRING): The fully qualified data type of the field.
    * `initialValue` (STRING, Optional): Initial value if defined and simple enough to capture.
    * `accessModifier` (STRING, Optional): Visibility level.
    * `isStatic` (BOOL, Optional): True if the field is static.
    * `isFinal` (BOOL, Optional): True if the field is final.
    * `isTransient` (BOOL, Optional): True if the field is transient.
    * `isVolatile` (BOOL, Optional): True if the field is volatile.

#### `ParameterNode` Table
* **Description:** Represents a parameter of a method or constructor.
* **Properties:**
    * `qualifiedName` (STRING, PRIMARY KEY): Unique name, e.g., "com.example.MyClass.myMethod(int,java.lang.String)#paramName_0".
    * `name` (STRING): The parameter name.
    * `documentation` (STRING, Optional): From Javadoc `@param` tag.
    * `language` (STRING): "Java".
    * `type` (STRING): The fully qualified data type of the parameter.
    * `position` (INT64): The ordinal position of the parameter (0-indexed).
    * `isFinal` (BOOL, Optional): True if the parameter is declared final.
    * `isVarargs` (BOOL, Optional): True if this is a varargs parameter.

#### `EnumConstantNode` Table
* **Description:** Represents a constant within a Java enum.
* **Properties:**
    * `qualifiedName` (STRING, PRIMARY KEY): Unique name, e.g., "com.example.MyEnum.CONSTANT_A".
    * `name` (STRING): The enum constant name (e.g., "CONSTANT_A").
    * `documentation` (STRING, Optional): Extracted Javadoc for the enum constant.
    * `language` (STRING): "Java".
    * `type` (STRING): The qualified name of the enum class itself.
    * `constructorArguments` (LIST(STRING), Optional): Arguments passed to the enum constant's constructor, if any.
    * `body` (STRING, Optional): If the enum constant has a specific class body.

#### `JavaAnnotationNode` Table
* **Description:** Represents the *definition* of a Java annotation type.
* **Properties:**
    * `qualifiedName` (STRING, PRIMARY KEY): The fully qualified name of the annotation type (e.g., "java.lang.Override").
    * `name` (STRING): The simple name of the annotation type (e.g., "Override").
    * `documentation` (STRING, Optional): Extracted Javadoc for the annotation type.
    * `language` (STRING): "Java".
    * `retentionPolicy` (STRING, Optional): E.g., "SOURCE", "CLASS", "RUNTIME".
    * `targetElements` (LIST(STRING), Optional): E.g., ["TYPE", "METHOD", "FIELD"].
    * `body` (STRING, Optional): The full source code of the annotation type definition.

#### `CommentNode` Table
* **Description:** Represents a code comment not part of formal Javadoc for a specific element.
* **Properties:**
    * `id` (STRING, PRIMARY KEY): A unique ID, e.g., `filePath#lineNumberStart_lineNumberEnd`.
    * `text` (STRING): The content of the comment.
    * `commentType` (STRING): E.g., "LINE", "BLOCK", "JAVADOC_BLOCK" (if not tied to an element's doc).
    * `lineNumberStart` (INT64): Starting line number in its file.
    * `lineNumberEnd` (INT64): Ending line number in its file.
    * `filePath` (STRING): Path of the file containing the comment.

### 2.2 Java Relationship Table Definitions

#### `DEFINED_IN_FILE` RelTable
* **Description:** Indicates that a top-level Java entity is defined within a specific file.
* **Connections:**
    * `FROM PackageNode TO FileNode` (for package-info.java)
    * `FROM ClassNode TO FileNode`
    * `FROM InterfaceNode TO FileNode`
    * `FROM JavaAnnotationNode TO FileNode` (for annotation type definitions)
* **Properties:**
    * `lineNumberStart` (INT64, Optional)
    * `lineNumberEnd` (INT64, Optional)
    * `columnNumberStart` (INT64, Optional)
    * `columnNumberEnd` (INT64, Optional)

#### `CONTAINS_MEMBER` RelTable
* **Description:** Represents containment or membership.
* **Connections:**
    * `FROM PackageNode TO ClassNode`
    * `FROM PackageNode TO InterfaceNode`
    * `FROM ClassNode TO MethodNode`
    * `FROM ClassNode TO ConstructorNode`
    * `FROM ClassNode TO FieldNode`
    * `FROM ClassNode TO ClassNode` (Inner/Nested Class)
    * `FROM ClassNode TO InterfaceNode` (Inner/Nested Interface)
    * `FROM ClassNode TO EnumConstantNode` (For Enums)
    * `FROM InterfaceNode TO MethodNode` (Abstract, static, or default methods)
    * `FROM InterfaceNode TO FieldNode` (Constants)
    * `FROM InterfaceNode TO ClassNode` (Nested Class in Interface)
    * `FROM InterfaceNode TO InterfaceNode` (Nested Interface in Interface)
    * `FROM MethodNode TO ClassNode` (Local/Anonymous Class)
    * `FROM ConstructorNode TO ClassNode` (Local/Anonymous Class in constructor)
* **Properties:** (None, or positional info if relevant for ordering members)

#### `CALLS` RelTable
* **Description:** Represents a method or constructor call.
* **Connections:**
    * `FROM MethodNode TO MethodNode`
    * `FROM MethodNode TO ConstructorNode`
    * `FROM ConstructorNode TO MethodNode`
    * `FROM ConstructorNode TO ConstructorNode` (e.g., `this()`, `super()`)
* **Properties:**
    * `lineNumber` (INT64, Optional): Line number where the call occurs in the caller's body.
    * `isDynamicDispatch` (BOOL, Optional): True if the call resolution might be dynamic.
    * `callType` (STRING, Optional): E.g., "STATIC", "VIRTUAL", "INTERFACE", "SUPER", "THIS_CONSTRUCTOR".

#### `HAS_PARAMETER` RelTable
* **Description:** Links a callable to its parameters.
* **Connections:**
    * `FROM MethodNode TO ParameterNode`
    * `FROM ConstructorNode TO ParameterNode`
* **Properties:** (None beyond the implicit ordering by `ParameterNode.position`)

#### `REFERENCES_TYPE` RelTable
* **Description:** Indicates a code element refers to a type (Class or Interface).
* **Connections:**
    * `FROM MethodNode TO ClassNode` (e.g., return type, local var type, cast)
    * `FROM MethodNode TO InterfaceNode` (e.g., return type, local var type, cast)
    * `FROM ConstructorNode TO ClassNode` (e.g., local var type, cast)
    * `FROM ConstructorNode TO InterfaceNode` (e.g., local var type, cast)
    * `FROM ParameterNode TO ClassNode` (parameter type)
    * `FROM ParameterNode TO InterfaceNode` (parameter type)
    * `FROM FieldNode TO ClassNode` (field type)
    * `FROM FieldNode TO InterfaceNode` (field type)
* **Properties:**
    * `usageContext` (STRING, Optional): E.g., "RETURN_TYPE", "PARAMETER_TYPE", "FIELD_TYPE", "LOCAL_VARIABLE_TYPE", "CAST", "INSTANCE_CREATION_TYPE", "TYPE_ARGUMENT".
    * `lineNumber` (INT64, Optional): Line where reference occurs.

#### `ACCESSES_FIELD` RelTable
* **Description:** Represents access to a field.
* **Connections:**
    * `FROM MethodNode TO FieldNode`
    * `FROM ConstructorNode TO FieldNode`
* **Properties:**
    * `accessType` (STRING): "READ", "WRITE", "READ_WRITE".
    * `lineNumber` (INT64, Optional): Line number where the access occurs.

#### `EXTENDS_CLASS` RelTable
* **Description:** Represents class inheritance.
* **Connections:**
    * `FROM ClassNode TO ClassNode` (Subclass to Superclass)

#### `IMPLEMENTS_INTERFACE` RelTable
* **Description:** A class implementing an interface, or an interface extending another.
* **Connections:**
    * `FROM ClassNode TO InterfaceNode`
    * `FROM InterfaceNode TO InterfaceNode` (Interface extension)

#### `IMPORTS` RelTable
* **Description:** Represents an import statement.
* **Connections:**
    * `FROM FileNode TO PackageNode` (e.g., `import com.example.*;`)
    * `FROM FileNode TO ClassNode` (e.g., `import com.example.MyClass;`)
    * `FROM FileNode TO InterfaceNode` (e.g., `import com.example.MyInterface;`)
    * `FROM FileNode TO MethodNode` (Static method import)
    * `FROM FileNode TO FieldNode` (Static field import)
* **Properties:**
    * `alias` (STRING, Optional): If the imported entity is aliased.
    * `isStatic` (BOOL): True for static imports.
    * `isOnDemand` (BOOL): True for wildcard imports (e.g., `import java.util.*;`).
    * `lineNumber` (INT64, Optional): Line number of import statement.

#### `ANNOTATED_BY` RelTable
* **Description:** Links a code element to an instance of an annotation usage. The `TO` node is the definition of the annotation type.
* **Connections:**
    * `FROM PackageNode TO JavaAnnotationNode`
    * `FROM ClassNode TO JavaAnnotationNode`
    * `FROM InterfaceNode TO JavaAnnotationNode`
    * `FROM MethodNode TO JavaAnnotationNode`
    * `FROM ConstructorNode TO JavaAnnotationNode`
    * `FROM FieldNode TO JavaAnnotationNode`
    * `FROM ParameterNode TO JavaAnnotationNode`
* **Properties:**
    * `annotationValues` (MAP(STRING, STRING), Optional): Key-value pairs of explicitly set annotation parameters and their string representations (e.g., `{"value": "\"Sample\"", "count": "1"}`).
    * `annotationSourceText` (STRING): The literal text of the annotation usage (e.g., `@Override`, `@SuppressWarnings("unchecked")`).
    * `lineNumber` (INT64, Optional): Line number of annotation.

#### `THROWS_EXCEPTION` RelTable
* **Description:** Indicates a callable may throw a specific type of exception.
* **Connections:**
    * `FROM MethodNode TO ClassNode` (Exception type is a Class)
    * `FROM ConstructorNode TO ClassNode`
* **Properties:**
    * `isDeclared` (BOOL): True if explicitly declared in a `throws` clause.
    * `lineNumber` (INT64, Optional): Line number of the `throw` statement if not declared.

#### `CREATES_INSTANCE` RelTable
* **Description:** Represents the instantiation of an object (`new` keyword).
* **Connections:**
    * `FROM MethodNode TO ClassNode` (The class being instantiated)
    * `FROM ConstructorNode TO ClassNode`
* **Properties:**
    * `lineNumber` (INT64, Optional): Line number of instantiation.

#### `ASSOCIATED_COMMENT` RelTable
* **Description:** Links a code entity to a relevant general CommentNode (not its primary Javadoc).
* **Connections:**
    * `FROM FileNode TO CommentNode`
    * `FROM PackageNode TO CommentNode`
    * `FROM ClassNode TO CommentNode`
    * `FROM InterfaceNode TO CommentNode`
    * `FROM MethodNode TO CommentNode`
    * `FROM ConstructorNode TO CommentNode`
    * `FROM FieldNode TO CommentNode`
    * `FROM ParameterNode TO CommentNode`
    * `FROM EnumConstantNode TO CommentNode`
    * `FROM JavaAnnotationNode TO CommentNode`
* **Properties:** (None, or `commentProximityType` like "PRECEDING", "TRAILING_SAME_LINE", "INTERNAL")

#### `OVERRIDES_METHOD` RelTable
* **Description:** A method in a subclass overrides a method in a superclass/interface.
* **Connections:**
    * `FROM MethodNode TO MethodNode` (Overriding method to Overridden method)

#### `TYPE_PARAMETER_BOUND` RelTable
* **Description:** Relates a generic type parameter to its bounds.
* **Connections:**
    * `FROM ClassNode TO ClassNode` (Generic class's param `T` bound by another Class)
    * `FROM ClassNode TO InterfaceNode` (Generic class's param `T` bound by an Interface)
    * `FROM InterfaceNode TO ClassNode`
    * `FROM InterfaceNode TO InterfaceNode`
    * `FROM MethodNode TO ClassNode`
    * `FROM MethodNode TO InterfaceNode`
* **Properties:**
    * `parameterName` (STRING): e.g., "T".
    * `boundType` (STRING): "EXTENDS", "SUPER".

## 3. Data Ingestion and Processing for Java

Populating the CKG for Java codebases involves these steps:
1.  **Source Code Acquisition:** Obtain the Java codebase.
2.  **Parsing and AST Generation:**
    * Utilize the `tree-sitter-java` parser via its Python bindings.
    * A Python-based processing pipeline will traverse the AST for each Java source file.
3.  **Entity Extraction & Denormalization:**
    * Traverse ASTs to identify and extract information for each Java-specific Node table defined in the KùzuDB schema.
    * Populate all attributes for each entity directly, including `name`, `qualifiedName`, `language` (set to "Java"), `documentation` (extracted Javadoc and other comments), and `body`/`content` (verbatim source text for methods, classes, files, etc.).
    * Generate unique `qualifiedName`s to serve as primary keys. For comments, generate unique `id`s.
4.  **Relationship Identification (Static Analysis):**
    * Re-traverse ASTs or use symbol tables (built during traversal) to identify relationships.
    * Examples: `DEFINED_IN_FILE`, `CONTAINS_MEMBER`, `CALLS`, `EXTENDS_CLASS`, `IMPLEMENTS_INTERFACE`, `IMPORTS`, `ANNOTATED_BY`, etc., mapping to the specific KùzuDB Rel tables for Java.
5.  **Graph Population (KùzuDB):**
    * The extracted entities (as rows for Node tables) and relationships (as rows for Rel tables) will be loaded into KùzuDB.
    * Python scripts will use KùzuDB's Python client (`kuzu`) to execute `CREATE NODE TABLE`, `CREATE REL TABLE`, and then `CREATE` or `MERGE` (if supported for idempotency, otherwise handle via application logic) Cypher-like queries to insert data.
    * Ensure idempotency: Re-processing the same code should update the graph, not create duplicates. Use primary keys (`qualifiedName`, `path`, `id`) for this. File checksums can help decide if a file needs re-parsing.
6.  **Linking and Resolution:**
    * Resolve cross-file references within the Java codebase. This typically requires a multi-pass approach or a global symbol table aggregated during processing before KùzuDB insertion.

## 4. Querying and Analysis Use Cases for Java (Using KùzuDB Cypher)

* **Code Navigation:**
    * `MATCH (caller)-[:CALLS]->(callee:MethodNode {name: 'targetMethod'}) RETURN caller.qualifiedName;`
    * `MATCH (c:ClassNode)-[:EXTENDS_CLASS*]->(s:ClassNode) WHERE c.name = 'MyDerivedClass' RETURN s.qualifiedName;`
* **Dependency Analysis:**
    * `MATCH (f:FileNode)-[:IMPORTS]->(p:PackageNode {name: 'com.example.dep'}) RETURN f.path;`
* **Impact Analysis:**
    * "If I change `ClassA`, what methods in other classes might be affected?" (Pathfinding queries involving `CALLS`, `REFERENCES_TYPE`, etc.)
* **Code Quality & Metrics:**
    * `MATCH (m:MethodNode) WHERE m.cyclomaticComplexity > 15 RETURN m.qualifiedName, m.cyclomaticComplexity;`
* **Content-based Search:**
    * `MATCH (m:MethodNode) WHERE m.body CONTAINS 'some specific logic' RETURN m.qualifiedName;`
    * `MATCH (cm:CommentNode) WHERE cm.text CONTAINS 'TODO:' RETURN cm.filePath, cm.lineNumberStart, cm.text;`

## 5. Tools and Technologies

* **Parsers:**
    * Primary Parsing Engine: Tree-sitter.
    * Implementation Language for Parsers: Python, utilizing Tree-sitter's Python bindings.
    * Java Grammar: `tree-sitter-java`.
* **Graph Database:**
    * KùzuDB: An embeddable, in-process property graph database management system. Queries will be written in KùzuDB's Cypher dialect. Data ingestion via its Python client.
* **Visualization:**
    * KùzuExplorer (if available/suitable).
    * Export data from KùzuDB (e.g., to CSV/Parquet) and use tools like Gephi, Cytoscape.
    * Custom web-based visualizations connecting to a Python backend that queries KùzuDB.
* **Analysis Platforms:**
    * Custom analysis scripts in Python, querying KùzuDB.

## 6. Data Storage and Model (KùzuDB)

* **Relational Property Graph Model:** KùzuDB employs a relational property graph model.
    * **Node Tables:** Entities (File, Class, Method, etc.) are stored in Node tables. Each Node table has a defined schema with named properties and data types. Each Node table must have a PRIMARY KEY.
    * **Rel Tables (Relationship Tables):** Relationships (CALLS, EXTENDS_CLASS, etc.) are stored in Rel tables. Each Rel table connects a `FROM` Node table to a `TO` Node table and can have its own properties. Rels are directed.
* **Schema Definition:** The schema (Node tables, Rel tables, their properties, and primary keys) is explicitly defined upfront using KùzuDB's DDL commands (e.g., `CREATE NODE TABLE ...`, `CREATE REL TABLE ...`).
* **Data Types:** KùzuDB supports standard data types like `STRING`, `INT64`, `BOOL`, `DOUBLE`, `DATETIME`, `LIST`, `MAP` etc., which will be used for entity properties.

## 7. Future Considerations

* **Versioning:** Store CKG snapshots for different Java code versions, perhaps by prefixing table names or adding a `version` property and filtering.
* **Build System Integration:** Parse Java build files (Maven POMs, Gradle scripts) to understand library dependencies.
* **Dynamic Analysis Integration:** Augment statically derived relationships (especially `CALLS`) with runtime information for more accurate call graphs in Java.
* **Performance with Large Codebases:** Evaluate KùzuDB's performance for ingestion and querying on very large Java projects.

## 8. Conclusion

Creating a Code Knowledge Graph focused on Java, with denormalized entities in KùzuDB and using Tree-sitter for parsing, is a powerful approach. Storing full code bodies and comments directly within nodes enhances analytical capabilities for Java software systems. This focused implementation will provide deep insights into the structure and dependencies of Java applications.